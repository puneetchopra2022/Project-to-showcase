# Stage 1: Build stage
FROM python:3.8-slim AS build-stage
# Set the working directory in the build stage
WORKDIR /app
# Copy only the requirements file to the build stage
COPY requirements.txt .
# Install dependencies in the build stage
RUN pip install --no-cache-dir -r requirements.txt

# Stage 2: Runtime stage with Distroless image
FROM gcr.io/distroless/python3:debug AS runtime-stage
# Set the working directory in the runtime stage
WORKDIR /app
# Copy only the necessary files from the build stage
COPY --from=build-stage /usr/local/lib/python3.8/site-packages /usr/local/lib/python3.8/site-packages
COPY --from=build-stage /app .
# Specify the entry point for the Distroless image
ENTRYPOINT ["python", "script.py"]



$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
Reference GithUb https://github.com/LondheShubham153/python-multistage-docker


# ------------------- Stage 1: Build Stage ------------------------------
FROM python:3.9 AS backend-builder

# Set the working directory to /app
WORKDIR /app

# Copy the contents of the backend directory into the container at /app
COPY backend/ .

# Install dependencies specified in requirements.txt
RUN pip install --no-cache-dir -r requirements.txt

# ------------------- Stage 2: Final Stage ------------------------------

# Use a slim Python 3.9 image as the final base image
FROM python:3.9-slim

# Set the working directory to /app
WORKDIR /app

# Copy the built dependencies from the backend-builder stage
COPY --from=backend-builder /usr/local/lib/python3.9/site-packages/ /usr/local/lib/python3.9/site-packages/

# Copy the application code from the backend-builder stage
COPY --from=backend-builder /app /app

# Expose port 5000 for the Flask application
EXPOSE 5000

# Define the default command to run the application
CMD ["python", "app.py"]
